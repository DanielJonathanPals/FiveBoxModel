var documenterSearchIndex = {"docs":
[{"location":"System/","page":"System","title":"System","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"System/#System","page":"System","title":"System","text":"","category":"section"},{"location":"System/","page":"System","title":"System","text":"An object of the type System contains the values of all five salinities in form of an Array and all parameter values as an Object of type ParameterSet, i.e. a system contains all the information of a given system at a single point in time.","category":"page"},{"location":"System/","page":"System","title":"System","text":"System","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.System","page":"System","title":"FiveBoxModel.RHS_module.System","text":"System\n\nMutalbe struct which carries the current sylinity values as well as the parameter values of a given  system\n\nFields\n\nsalinities::Array: Array of size (5,) of the form [SN,ST,SS,SIP,S_B] where each salinity is   given in units of psu (Any five element Array is reshaped into this form at initialization of    the stuct)\nparams::ParameterSet: Contains the current parameters describing the system\n\n\n\n\n\n","category":"type"},{"location":"System/","page":"System","title":"System","text":"An alternative instantiation is given by ","category":"page"},{"location":"System/","page":"System","title":"System","text":"System(;S_N::Number,\n        S_T::Number,\n        S_S::Number,\n        S_IP::Number,\n        S_B::Number,\n        params::ParameterSet)","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.System-Tuple{}","page":"System","title":"FiveBoxModel.RHS_module.System","text":"System(;S_N::Number,\n        S_T::Number,\n        S_S::Number,\n        S_IP::Number,\n        S_B::Number,\n        params::ParameterSet)\n\nReturns an element of the type System, of the form System([S_N,S_T,S_S,S_IP,S_B],params)     (All salinities must be given in units of psu)\n\n\n\n\n\n","category":"method"},{"location":"System/","page":"System","title":"System","text":"An instance of ParameterSet which is needed to create a System is of the following form","category":"page"},{"location":"System/","page":"System","title":"System","text":"ParameterSet","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.ParameterSet","page":"System","title":"FiveBoxModel.RHS_module.ParameterSet","text":"ParameterSet\n\nStuct whos fields describe all Parameters of a given System. The fields are to be given as keyword arguments.\n\nFields\n\nλ::Number: [λ] = m^6 * kg^{-1} * s^{-1} * 10^7\nα::Number: [α] = kg * m^{-3} * K^{-1}\nβ::Number: [β] = kg * m^{-3} * psu^{-1}\nγ::Number: [γ] = 1\nη::Number: [η] = m^3 * s^{-1} * 10^6\nμ::Number: [μ] = °C * m^{-3} * s * 10^{-8}\nV_N::Number: [V_N] = m^3 * 10^16\nV_S::Number: [V_S] = m^3 * 10^16\nV_T::Number: [V_T] = m^3 * 10^16\nV_IP::Number: [V_IP] = m^3 * 10^16    \nV_B::Number: [V_B] = m^3 * 10^16\nK_N::Number: [K_N] = m^3 * s^{-1} * 10^6\nK_S::Number: [K_S] = m^3 * s^{-1} * 10^6\nK_IP::Number: [K_IP] = m^3 * s^{-1} * 10^6\nF_N::Number: [F_N] = m^3 * s^{-1} * 10^6\nF_S::Number: [F_S] = m^3 * s^{-1} * 10^6\nF_T::Number: [F_T] = m^3 * s^{-1} * 10^6\nF_IP::Number: [F_IP] = m^3 * s^{-1} * 10^6\nS_0::Number: [S_0] = psu\nT_0::Number: [T_0] = °C\nT_S::Number: [T_S] = °C\n\n\n\n\n\n","category":"type"},{"location":"System/","page":"System","title":"System","text":"Both instances of System and ParameterSet can be updated respectively via","category":"page"},{"location":"System/","page":"System","title":"System","text":"updateSystem!\nupdateParameterSet!","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.updateSystem!","page":"System","title":"FiveBoxModel.RHS_module.updateSystem!","text":"updateSystem!(sys::System, arr::Array{Float64})\n\nUpdates the values in the System according to the values given in the array.\n\n\n\n\n\n","category":"function"},{"location":"System/#FiveBoxModel.RHS_module.updateParameterSet!","page":"System","title":"FiveBoxModel.RHS_module.updateParameterSet!","text":"updateParameterSet!(params::ParameterSet, arr::Array)\n\nUpdates the given ParameterSet with the values given in the Array.\n\n\n\n\n\n","category":"function"},{"location":"System/#Presets","page":"System","title":"Presets","text":"","category":"section"},{"location":"System/","page":"System","title":"System","text":"For the FAMOUS simulation there are presets for both the initial parameter values and the salinities","category":"page"},{"location":"System/","page":"System","title":"System","text":"FAMOUSparams\nFAMOUS","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.FAMOUSparams","page":"System","title":"FiveBoxModel.RHS_module.FAMOUSparams","text":"FAMOUSparams\n\nA ParameterSet containing the parameters as measured from the FAMOUS simulation.\n\n\n\n\n\n","category":"constant"},{"location":"System/#FiveBoxModel.RHS_module.FAMOUS","page":"System","title":"FiveBoxModel.RHS_module.FAMOUS","text":"FAMOUS\n\nPreset of a instance of type System which carries the initial values from the FAMOUS     experiment\n\n\n\n\n\n","category":"constant"},{"location":"System/#To-Array-conversion","page":"System","title":"To Array conversion","text":"","category":"section"},{"location":"System/","page":"System","title":"System","text":"Often it is more convenient to work with arrays rather then with systems. The following method allows a conversion from a System into an Array","category":"page"},{"location":"System/","page":"System","title":"System","text":"toArray","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.toArray","page":"System","title":"FiveBoxModel.RHS_module.toArray","text":"ToArray(sys::System)\n\nConverts the data contained in the System into an array\n\n\n\n\n\n","category":"function"},{"location":"System/","page":"System","title":"System","text":"To obtain certain data concerning a given variable of interest from an Array, one can use the function get_VariableName(arr::Array) where \"VariableName\" must be replaced with the name of the respective variable of interest. In case arr represents a full trajectory, get_VariableName will slice out the respective part of the trajectory describing the evolution of the variable of interest. The same function also works when applied to systems, i.e. get_VariableName(sys::System). An alternative method would be to extract the index of the variable of interest via the following dictionary","category":"page"},{"location":"System/","page":"System","title":"System","text":"get_index","category":"page"},{"location":"System/#FiveBoxModel.RHS_module.get_index","page":"System","title":"FiveBoxModel.RHS_module.get_index","text":"get_index\n\nWhen converting objects of type System into Arrays it might be confusiong to ceep track     to which entry in the array encodes which variable. The dictionary get_index encodes     exactly this information where the keys are the names of the respective variables.\n\n\n\n\n\n","category":"constant"},{"location":"System/","page":"System","title":"System","text":"This is also illustrated in the following example","category":"page"},{"location":"System/","page":"System","title":"System","text":"julia> using FiveBoxModel\n\njulia> get_S_N(FAMOUS)\n35.088\n\njulia> arr = toArray(FAMOUS)\n26-element Vector{Float64}:\n  35.088\n   ⋮\n   5.571\n\njulia> get_S_N(arr)\n35.088\n\njulia> arr[get_index[\"S_N\"]]\n35.088","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"home/#FiveBoxModel","page":"Home","title":"FiveBoxModel","text":"","category":"section"},{"location":"home/","page":"Home","title":"Home","text":"Documentation for FiveBoxModel.","category":"page"},{"location":"home/","page":"Home","title":"Home","text":"This module is an implementation of the 5 box model describing the AMOC. It is set up in such a way, that it is possible for the parameters to change dynamically where the dynamics of both the salinities and the parameters is goverend by stochastic differential equations which may be customized. Further it is possible to define updates to the RHS of the ODEs describing the dynamics in parameter space which may depend on the past trajectory.","category":"page"},{"location":"RunSystem/","page":"Run System","title":"Run System","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"RunSystem/#Integrate-a-System","page":"Run System","title":"Integrate a System","text":"","category":"section"},{"location":"RunSystem/","page":"Run System","title":"Run System","text":"In order to integrate a given System an instance of type RunParameters must be created which encodes all relevant information needed for the integration of the system.","category":"page"},{"location":"RunSystem/","page":"Run System","title":"Run System","text":"RunParameters\nRunParameters(sys;\n                updateInterval = 1.,\n                t_max = 10.,\n                dt = 0.001,\n                phaseDyn = DeterministicPhaseDynamics,\n                paramDyn = fixedParameters)","category":"page"},{"location":"RunSystem/#FiveBoxModel.RunParameters","page":"Run System","title":"FiveBoxModel.RunParameters","text":"RunParameters\n\nstruct which contains the relevant parameters for running a given system. \n\nFields\n\n-sys::System: System holding the initial conditions -integrationMethod: Method which the solver from DifferentialEquations will use -updateInterval::Number: Time after which the update! function will periodically be applied to     the phaseDyn and paramDyn. Running the System in not to large time intervals also increases     the numerical stability of the result -t_max::Number: Overall runtime  -dt::Number: Time difference of consecutive datapoints in the trajectory (This is not the dt     used by the DifferentialEquations package to integrate the trajectory) -phaseDyn::PhaseDynamics -paramDyn::ParameterDynamics\n\n\n\n\n\n","category":"type"},{"location":"RunSystem/#FiveBoxModel.RunParameters-Tuple{Any}","page":"Run System","title":"FiveBoxModel.RunParameters","text":"function RunParameters(sys;\n    updateInterval = 1.,\n    t_max = 10.,\n    dt = 0.001,\n    phaseDyn = DeterministicPhaseDynamics,\n    paramDyn = fixedParameters)\n\nAlternative instantiation of an object of type RunParameters, with some default arguments.\n\n\n\n\n\n","category":"method"},{"location":"RunSystem/","page":"Run System","title":"Run System","text":"Then the system can simply be integrated using","category":"page"},{"location":"RunSystem/","page":"Run System","title":"Run System","text":"runSystem","category":"page"},{"location":"RunSystem/#FiveBoxModel.runSystem","page":"Run System","title":"FiveBoxModel.runSystem","text":"runSystem(rp::RunParameters; update_system = true)\n\nRuns the productspace System encoded in rp according to the parameters in rp and returns the  full trajectory of the time evolution together with an array containing the respective times corresponding to the datapoints. If update_system == true then the system rp.sys is updated accordingly.\n\n\n\n\n\n","category":"function"},{"location":"RunSystem/#Example","page":"Run System","title":"Example","text":"","category":"section"},{"location":"RunSystem/","page":"Run System","title":"Run System","text":"julia> using FiveBoxModel\n\njulia> rp = RunParameters(FAMOUS)\nRunParameters(System([35.088, 35.67, 34.441, 34.689, 34.577], ParameterSet(2.66, 0.12, 0.79, 0.58, 66.061, 7.0, 3.683, 10.28, 5.151, 21.29, 88.12, 5.439, 1.88, 89.778, 0.375, 1.014, -0.723, -0.666, 0.035, 3.26, 5.571)), 1.0, 10.0, 0.001, PhaseDynamics(FiveBoxModel.deterministic_salinity_dynamics!, FiveBoxModel.no_stochstic_salinity_dynamics!, nothing, nothing), ParameterDynamics(FiveBoxModel.no_deterministic_param_dynamics!, FiveBoxModel.no_stochastic_param_dynamics!, nothing, nothing))\n\njulia> traj,t = runSystem(rp)\nStarting to integrate System...\nthe total time interval is subdivided into 10 subintervals\n\nStarting to integrate subinterval 1 / 10\n\nStarting to integrate subinterval 2 / 10\n\nStarting to integrate subinterval 3 / 10\n\nStarting to integrate subinterval 4 / 10\n\nStarting to integrate subinterval 5 / 10\n\nStarting to integrate subinterval 6 / 10\n\nStarting to integrate subinterval 7 / 10\n\nStarting to integrate subinterval 8 / 10\n\nStarting to integrate subinterval 9 / 10\n\nStarting to integrate subinterval 10 / 10\n\n([35.088 35.087999997887 … 35.08797027422441 35.08797027062664; 35.67 35.66999999441803 … 35.669962166212436 35.66996216393875; … ; 3.26 3.26 … 3.26 3.26; 5.571 5.571 … 5.571 5.571], [0.0, 0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009  …  9.99, 9.991, 9.992, 9.993, 9.994, 9.995, 9.996, 9.997, 9.998, 9.999])\n\njulia> size(traj)\n(26, 10000)\n\njulia> size(t)\n(10000,)","category":"page"},{"location":"Linearization/","page":"Linearization","title":"Linearization","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"Linearization/#Linearization","page":"Linearization","title":"Linearization","text":"","category":"section"},{"location":"Linearization/","page":"Linearization","title":"Linearization","text":"These methods allow the linearization of the model, i.e the computation of the Jacobian of the RHS of the  ODSs describing the systems dynamics","category":"page"},{"location":"Linearization/","page":"Linearization","title":"Linearization","text":"jacobian\nget_eigvals","category":"page"},{"location":"Linearization/#FiveBoxModel.jacobian","page":"Linearization","title":"FiveBoxModel.jacobian","text":"jacobian(arr::Vector{Float64})\n\nComputes the Jacobian for at the given data of the RHS of the ODE describing the     time evolution of the salinities. \n\n\n\n\n\njacobian(arr::Array{Float64})\n\nComputes the Jacobian for each timepoint in the given trajectory of the RHS of the ODE describing the     time evolution of the salinities. \n\n\n\n\n\njacobian(sys::System)\n\nComputes the Jacobian of the RHS of the ODE describing the     time evolution of the salinities for the given System. \n\n\n\n\n\n","category":"function"},{"location":"Linearization/#FiveBoxModel.get_eigvals","page":"Linearization","title":"FiveBoxModel.get_eigvals","text":"get_eigvals(x::Array{Float64})\n\nIf x is a Matrix then this function simply returns the eigenvalues of this Matrix. If instead x is     a single datapoint of a trajectory it returns the eigenvalues of the linearized System at this     point and if x is a trajectory consisting of mulitple datapoints then a Vector is returned with     the first entry being a Vector containining all the first eigenvalues, the second entry a Vector     with all the second eigenvalues and so on.\n\n\n\n\n\nget_eigvals(x::Vector{Matrix{Float64}})\n\nThis function returns a Vector where the first entry is again a Vector containing      all the first eigenvalues, the second entry is a Vector containing all the second     eigenvalues and so on.\n\n\n\n\n\nget_eigvals(sys::System)\n\nThe function returns the eigenvalues of the linearized version of the given System.\n\n\n\n\n\n","category":"function"},{"location":"Linearization/#Example","page":"Linearization","title":"Example","text":"","category":"section"},{"location":"Linearization/","page":"Linearization","title":"Linearization","text":"In this example we are interested in the Jacobian of the FAMOUS system with its default initial conditions as well as the eigenvalues of the resulting matrix which we compute in two alternative ways.","category":"page"},{"location":"Linearization/","page":"Linearization","title":"Linearization","text":"julia> using FiveBoxModel\n\njulia> jacob = jacobian(FAMOUS)\n5×5 Matrix{Float64}:\n -0.0111047     0.0193488    -0.00856547   0.0          0.0\n -0.00850446   -0.0149863     0.0198343    0.00409944   0.0\n  0.000415914   0.000577123  -0.0522628    0.0275601    0.0233984\n -0.000119763   0.0           0.0134273   -0.0142994    0.00109056\n  0.00094166    0.0           0.00205146   0.0         -0.00299312\njulia> get_eigvals(FAMOUS)\n5-element Vector{ComplexF64}:\n     -0.061132336622295 + 0.0im\n  -0.012867247154163776 - 0.012842367738329028im\n  -0.012867247154163776 + 0.012842367738329028im\n  -0.008779464134900803 + 0.0im\n -7.349766174807036e-18 + 0.0im\njulia> get_eigvals(jacob)\n5-element Vector{ComplexF64}:\n     -0.061132336622295 + 0.0im\n  -0.012867247154163776 - 0.012842367738329028im\n  -0.012867247154163776 + 0.012842367738329028im\n  -0.008779464134900803 + 0.0im\n -7.349766174807036e-18 + 0.0im","category":"page"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"ParamDyn/#Set-up-the-Parameter-Dynamics","page":"Parameter Dynamics","title":"Set up the Parameter Dynamics","text":"","category":"section"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"The objects presented in this section are usefull to set up the dynamics of the parameter system and can be used to specify how there dynamics should be updated according to the past trajectory.","category":"page"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"ParameterDynamics\nParameterDynamics(f!::Function, \n                    g!::Function;   \n                    noise_rate_prototype::Union{Matrix{Float64},Nothing} = nothing)","category":"page"},{"location":"ParamDyn/#FiveBoxModel.ParameterDynamics","page":"Parameter Dynamics","title":"FiveBoxModel.ParameterDynamics","text":"ParameterDynamics\n\nA mutable struct which encodes the RHS of the dynamics of the parameter space\n\nFields\n\nf!::Function: Describes the deterministic dynamics in parameter space with f! of the from   f!(du,u,t_0,t) with length(du) = length(u) = 26 and u contains all the salinities   together with all the parameter values. Since the system in run in sub-time-intervals   the current time is given by t+t_0 which which is relevent it the system is non autonomous.   Also note that all times are given in the unit of years in order to avoid very large numbers    for t.\ng!::Function: Describes the stochastic dynamics in parameter space and is of the same form   as f!\nnoise_rate_prototype::Matrix{Float64}: Is some Matrix with the same dimensions as the du    argument in g! which is later needed to set up the SEDProblem from the DifferentialEquations   package. If noise_rate_prototype === nothing then diagonal noise is used and du has the   form of a Vector. Note that noise_rate_prototype must be the same must have the same sizes   for corresponding instances of the ParameterDynamics and PhaseDynamics strucs.\n\nIf only f! and g! are given then update will be initialized to update = nothing\n\n\n\n\n\n","category":"type"},{"location":"ParamDyn/#FiveBoxModel.ParameterDynamics-Tuple{Function, Function}","page":"Parameter Dynamics","title":"FiveBoxModel.ParameterDynamics","text":"ParameterDynamics(f!::Function, \n                    g!::Function;   \n                    noise_rate_prototype::Union{Matrix{Float64},Nothing} = nothing)\n\nAlternative instantiation which returns an object of ParameterDynamics.\n\n\n\n\n\n","category":"method"},{"location":"ParamDyn/#Presets","page":"Parameter Dynamics","title":"Presets","text":"","category":"section"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"If either f! or g! as arguments of ParameterDynamics are supposed to be zero one can respectively use the presets for these functions.","category":"page"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"no_deterministic_param_dynamics!\nno_stochastic_param_dynamics!","category":"page"},{"location":"ParamDyn/#FiveBoxModel.no_deterministic_param_dynamics!","page":"Parameter Dynamics","title":"FiveBoxModel.no_deterministic_param_dynamics!","text":"function no_deterministic_param_dynamics!(du, u, t_0, t)\n\nThis function encodes the deterministic part of the ODEs describing the dynamics of the parameters     in the case where the parameters do not change deterministically with time. This can be used     as argument for f! when ceating an instance of the type ParameterDynamics.\n\n\n\n\n\n","category":"function"},{"location":"ParamDyn/#FiveBoxModel.no_stochastic_param_dynamics!","page":"Parameter Dynamics","title":"FiveBoxModel.no_stochastic_param_dynamics!","text":"no_stochastic_param_dynamics!(du, u, t_0, t)\n\nThis function encodes the stochastic part of the ODEs describing the dynamics of the parameters     in the case where this part is zero. This can be used     as argument for g! when ceating an instance of the type ParameterDynamics.\n\n\n\n\n\n","category":"function"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"If both are zero simultaneously there also is a preset instance of an ParameterDynamics object","category":"page"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"fixedParameters","category":"page"},{"location":"ParamDyn/#FiveBoxModel.fixedParameters","page":"Parameter Dynamics","title":"FiveBoxModel.fixedParameters","text":"fixedParameters\n\nThis is a preset of the type ParameterDynamics where the parameters do not change during the evolution of     the system.\n\n\n\n\n\n","category":"constant"},{"location":"ParamDyn/#Examples","page":"Parameter Dynamics","title":"Examples","text":"","category":"section"},{"location":"ParamDyn/#Hosing-experiment","page":"Parameter Dynamics","title":"Hosing experiment","text":"","category":"section"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"For this example we only want deterministic parameter changes which occur as follows and there is no  stochastic part to the parameter dynamics. We call the deterministic part hosing_experiment!. This can then be used to create a respective instand of the type ParameterDynamics. Since we do not want f! and g! to be updated during the integration process we instanciate the object in the following way","category":"page"},{"location":"ParamDyn/","page":"Parameter Dynamics","title":"Parameter Dynamics","text":"julia> function hosing_experiment!(du, u, t_0, t)\n           H_1 = 5e-4\n           du[get_index[\"parameters\"]] .= 0.\n           if t+t_0 <= 2000\n               sign = 1\n           else\n               sign = -1\n           end\n           du[get_index[\"F_N\"]] = sign*H_1*0.194\n           du[get_index[\"F_S\"]] = -sign*H_1*0.226\n           du[get_index[\"F_T\"]] = sign*H_1*0.597\n           du[get_index[\"F_IP\"]] = -sign*H_1*0.565\n       end\nhosing_experiment! (generic function with 1 method)\n\njulia> using FiveBoxModel\n\njulia> hosingExperiment = ParameterDynamics(hosing_experiment!,no_stochastic_param_dynamics!)\nParameterDynamics(hosing_experiment!, FiveBoxModel.no_stochastic_param_dynamics!, nothing, nothing)","category":"page"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"PhaseDynamics/#Set-up-the-Phase-Dynamics","page":"Phase Dynamics","title":"Set up the Phase Dynamics","text":"","category":"section"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"The objects presented in this section are usefull to set up the dynamics of the phase system and can be used to specify how these dynamics should be updated according to the past trajectory.","category":"page"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"PhaseDynamics\nPhaseDynamics(f!::Function, \n                g!::Function;   \n                noise_rate_prototype::Union{Matrix{Float64},Nothing} = nothing)","category":"page"},{"location":"PhaseDynamics/#FiveBoxModel.PhaseDynamics","page":"Phase Dynamics","title":"FiveBoxModel.PhaseDynamics","text":"PhaseDynamics\n\nA mutable struct which encodes the RHS of the dynamics of the phase space\n\nFields\n\nf!::Function: Describes the deterministic dynamics in phase space with f! of the from   f!(du,u,t_0,t) with length(du) = length(u) = 26 and u contains all the salinities   together with all the parameter values. Since the system in run in sub-time-intervals   the current time is given by t+t_0 which which is relevent it the system is non autonomous.   Also note that all times are given in the unit of years in order to avoid very large numbers    for t.\ng!::Function: Describes the stochastic dynamics in phase space and is of the same form   as f!.\nnoise_rate_prototype::Matrix{Float64}: Is some Matrix with the same dimensions as the du    argument in g! which is later needed to set up the SEDProblem from the DifferentialEquations   package. If noise_rate_prototype === nothing then diagonal noise is used and du has the   form of a Vector. Note that noise_rate_prototype must be the same must have the same sizes   for corresponding instances of the ParameterDynamics and PhaseDynamics strucs.\n\nIf only f! and g! are given then update will be initialized to update = nothing\n\n\n\n\n\n","category":"type"},{"location":"PhaseDynamics/#FiveBoxModel.PhaseDynamics-Tuple{Function, Function}","page":"Phase Dynamics","title":"FiveBoxModel.PhaseDynamics","text":"PhaseDynamics(f!::Function, \n                g!::Function;   \n                noise_rate_prototype::Union{Matrix{Float64},Nothing} = nothing)\n\nAlternative instantiation which returns an object of ParameterDynamics.\n\n\n\n\n\n","category":"method"},{"location":"PhaseDynamics/#Presets","page":"Phase Dynamics","title":"Presets","text":"","category":"section"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"If f! is supposed to be given by the RHS of the deterministic salinity evolution as described in the paper or g! as argument of PhaseDynamics is supposed to be zero, one can respectively use the presets for these functions.","category":"page"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"deterministic_salinity_dynamics!\noriginal_deterministic_salinity_dynamics!\nno_stochstic_salinity_dynamics!","category":"page"},{"location":"PhaseDynamics/#FiveBoxModel.deterministic_salinity_dynamics!","page":"Phase Dynamics","title":"FiveBoxModel.deterministic_salinity_dynamics!","text":"deterministic_salinity_dynamics!(du, u, t_0, t)\n\nThis function encodes the deterministic part of the ODEs describing the dynamics of the parameters     in the case where the deterministic evolution of the salinities in time is given by the respective     equations of motion (the modified versions). This can be used     as argument for f! when ceating an instance of the type ParameterDynamics.\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.original_deterministic_salinity_dynamics!","page":"Phase Dynamics","title":"FiveBoxModel.original_deterministic_salinity_dynamics!","text":"deterministic_salinity_dynamics!(du, u, t_0, t)\n\nThis function encodes the deterministic part of the ODEs describing the dynamics of the parameters     in the case where the deterministic evolution of the salinities in time is given by the respective     equations of motion (the original equations as given in the paper). This can be used     as argument for f! when ceating an instance of the type ParameterDynamics.\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.no_stochstic_salinity_dynamics!","page":"Phase Dynamics","title":"FiveBoxModel.no_stochstic_salinity_dynamics!","text":"no_stochastic_salinity_dynamics!(du, u, t_0, t)\n\nThis function encodes the stochastic part of the ODEs describing the dynamics of the salinities     in the case where this part is zero. This can be used     as argument for g! when ceating an instance of the type ParameterDynamics.\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"For certain combinations of the above cases in a situation where no updates of f! and g! are intended. The following presets might be usefull","category":"page"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"DeterministicPhaseDynamics\nOriginalDeterministicPhaseDynamics","category":"page"},{"location":"PhaseDynamics/#FiveBoxModel.DeterministicPhaseDynamics","page":"Phase Dynamics","title":"FiveBoxModel.DeterministicPhaseDynamics","text":"DeterministicPhaseDynamics\n\nThis is a preset of the type PhaseDynamics where the salinity evolutions is fully deterministic and     given by the modified equations.\n\n\n\n\n\n","category":"constant"},{"location":"PhaseDynamics/#FiveBoxModel.OriginalDeterministicPhaseDynamics","page":"Phase Dynamics","title":"FiveBoxModel.OriginalDeterministicPhaseDynamics","text":"OriginalDeterministicPhaseDynamics\n\nThis is a preset of the type PhaseDynamics where the salinity evolutions is fully deterministic and     given by the original equations from the paper.\n\n\n\n\n\n","category":"constant"},{"location":"PhaseDynamics/#RHS-of-the-ODEs-describing-the-salinity-evolution","page":"Phase Dynamics","title":"RHS of the ODEs describing the salinity evolution","text":"","category":"section"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"For a more detailed access to the RHSs of the ODEs describing the salinity evolution the following methods might be usefull","category":"page"},{"location":"PhaseDynamics/","page":"Phase Dynamics","title":"Phase Dynamics","text":"rhs_S_N\nrhs_S_T\nrhs_S_S\nrhs_S_IP\nrhs_S_B\nget_q","category":"page"},{"location":"PhaseDynamics/#FiveBoxModel.RHS_module.rhs_S_N","page":"Phase Dynamics","title":"FiveBoxModel.RHS_module.rhs_S_N","text":"rhs_S_N(arr::Array{Float64}; original::Bool = false)\n\nArguments\n\narr::Array{Float64}: Array of length 26 containing the current state of the system at which the   RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_N\n\n\n\n\n\nrhs_S_N(sys::System; original::Bool = false)\n\nArguments\n\nsys::System: system containing the current state at which the RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_N\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.RHS_module.rhs_S_T","page":"Phase Dynamics","title":"FiveBoxModel.RHS_module.rhs_S_T","text":"rhs_S_T(arr::Array{Float64}; original::Bool = false)\n\nArguments\n\narr::Array{Float64}: Array of length 26 containing the current state of the system at which the   RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_T\n\n\n\n\n\nrhs_S_T(sys::System; original::Bool = false)\n\nArguments\n\nsys::System: system containing the current state at which the RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_T\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.RHS_module.rhs_S_S","page":"Phase Dynamics","title":"FiveBoxModel.RHS_module.rhs_S_S","text":"rhs_S_S(arr::Array{Float64}; original::Bool = false)\n\nArguments\n\narr::Array{Float64}: Array of length 26 containing the current state of the system at which the   RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_S\n\n\n\n\n\nrhs_S_S(sys::System; original::Bool = false)\n\nArguments\n\nsys::System: system containing the current state at which the RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_S\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.RHS_module.rhs_S_IP","page":"Phase Dynamics","title":"FiveBoxModel.RHS_module.rhs_S_IP","text":"rhs_S_IP(arr::Array{Float64}; original::Bool = false)\n\nArguments\n\narr::Array{Float64}: Array of length 26 containing the current state of the system at which the   RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_IP\n\n\n\n\n\nrhs_S_IP(sys::System; original::Bool = false)\n\nArguments\n\nsys::System: system containing the current state at which the RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_IP\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.RHS_module.rhs_S_B","page":"Phase Dynamics","title":"FiveBoxModel.RHS_module.rhs_S_B","text":"rhs_S_B(arr::Array{Float64}; original::Bool = false)\n\nArguments\n\narr::Array{Float64}: Array of length 26 containing the current state of the system at which the   RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_B\n\n\n\n\n\nrhs_S_B(sys::System; original::Bool = false)\n\nArguments\n\nsys::System: system containing the current state at which the RHS of the ODE is to be determined\noriginal::Bool: If false then the modified version of the RHS of the ODE is returned and if true   then the original version as presented in the paper is used\n\nReturns\n\nThe RHS of the ODE describing the rate of change of the varialbe S_B\n\n\n\n\n\n","category":"function"},{"location":"PhaseDynamics/#FiveBoxModel.RHS_module.get_q","page":"Phase Dynamics","title":"FiveBoxModel.RHS_module.get_q","text":"get_q(arr::Array{Float64})\n\nReturns the value of q for an array describing a given system.      To this end the euqations q = λ[α(Tₛ-Tₙ)+β(Sₙ-Sₛ)] and     Tₙ = μ⋅q+T₀ where solved for q\n\n\n\n\n\nget_q(sys::System)\n\nReturns the value of q of a given system. To this end the euqations q = λ[α(Tₛ-Tₙ)+β(Sₙ-Sₛ)] and     Tₙ = μ⋅q+T₀ where solved for q\n\n\n\n\n\n","category":"function"},{"location":"","page":"Index","title":"Index","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"#FiveBoxModel","page":"Index","title":"FiveBoxModel","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Documentation for FiveBoxModel.","category":"page"},{"location":"","page":"Index","title":"Index","text":"","category":"page"},{"location":"Plot/","page":"Plot","title":"Plot","text":"CurrentModule = FiveBoxModel","category":"page"},{"location":"Plot/#Plot-results","page":"Plot","title":"Plot results","text":"","category":"section"},{"location":"Plot/","page":"Plot","title":"Plot","text":"The idea to achieve organised plots is to first create single plots only containing one subplot each and then combining these to a large plot which contains all the information form the single plots.","category":"page"},{"location":"Plot/","page":"Plot","title":"Plot","text":"SinglePlot\ncreateSinglePlot\ncombine_plots","category":"page"},{"location":"Plot/#FiveBoxModel.SinglePlot","page":"Plot","title":"FiveBoxModel.SinglePlot","text":"SinglePlot\n\nStuct containing all the information needed to create a subplot. The idea is that for more complex plots including multiple subplots it might be more convenient to first generate  the subplots one by one and then only at the end combine these to a full plot using the  combine_plots function.\n\nFields\n\nx::Vector{Float64}: Vector containing the data for the x axis\ny::Vector{Vector{Float64}}: A vector of vectors where each vector contains the y data    of a certain quantity. Each vector in y must have the same length as the vector x.\ntitle::String: Title of the subplot\nx_label::String: x label of the subplot. For no label use \"\".\ny_label::String: y label of the subplot. For no label use \"\".\nx_unit::String: Unit of the x data. For no unit use \"\".\ny_unit::String: Unit of the y data. For no unit use \"\".\ny_legend::Union{Vector{String},Nothing}: Contains the names of each dataseries to be   plotted. For no legend use y_legend = nothing. Otherwise the length of y_legend   must equal the length of the vector y.\n\nTo immediately show a given subplot of an element of type SinglePlot use\n\n(sp::SinglePlot)(;resolution::Tuple{Int64,Int64} = (1200,800),show = true)\n\nThis will return the Figure and Axis of the respective plot and the plot is immediately shown if show = true\n\n\n\n\n\n","category":"type"},{"location":"Plot/#FiveBoxModel.createSinglePlot","page":"Plot","title":"FiveBoxModel.createSinglePlot","text":"createSinglePlot(x::Union{Vector{Float64},String},\n    y::Union{Vector,String},\n    traj::Array{Float64},\n    t::Vector{Float64};\n    title::String=\"\",\n    x_label::String=\"\",\n    y_label::String=\"\",\n    x_unit::String=\"\",\n    y_unit::String=\"\",\n    y_legend::Union{Vector{String},String,Nothing}=nothing)\n\nAllows for a more confortable initialisation of an object of the type SinglePlot.\n\nArguments\n\nx::Union{Vector{Float64},String}: This can either be a vector containing the data   to be plotted on the x axis or one can simply give a String containing the name   of the data which is to be plotted on the x axis as long as a function of the form   get_x(traj) is defined or if x = \"t\".\ny::Union{Vector,String}: If the subplot should only contain one dataseries then y   works in the same way as the x argument. In case multiple dataseries are to be   plotted y must be given as an vector which may contain a mixture of Strings and    Vectors, where each element describes a dataseries to be plotted. The lengths of   the dataseries must all be the same and also have the same length as the series used   for x.\ntraj::Array{Float64}: The integrated trajectory of the System as e.g. returned by the   function runSystem.\nt::Vector{Float64}: The time series of a run of the System as e.g. returned by the   function runSystem.\ntitle::String=\"\": Title of the subplot.\nx_label::String=\"\": x label of the subplot.\ny_label::String=\"\": y label of the subplot.\nx_unit::String=\"\": Unit of the x data.\ny_unit::String=\"\": Unit of the y data.\ny_legend::Union{Vector{String},String,Nothing}=nothing: Vector containing the names   of the dataseries which are displayed in the final plot. If given the length of   y_legend must be the same as the length of the argument y.\n\nReturns\n\nThe function returns an element of the type SinglePlot where all Strings in the     arguments x and y have been converted into the respective Vectors. Further if     x is given as a String and no x_label is given then the String in x is passed     as the x_label argument and the same holds for y if only one dataseries is to be      plotted. In the case of mulityple dataseries the names contained in y are passed     as the y_legend if y only contains Strings and no y_legend was given.\n\n\n\n\n\n","category":"function"},{"location":"Plot/#FiveBoxModel.combine_plots","page":"Plot","title":"FiveBoxModel.combine_plots","text":"combine_plots(sp::Union{Vector{SinglePlot},SinglePlot}, \n                positions::Vector;\n                resolution::Tuple{Int64,Int64} = (1200,800))\n\nCombines the SinglePlot elements given in the argument sp to a large plot. The length of  the Vector positions must agree with the length of sp.\n\nArguments\n\nsp::Union{Vector{SinglePlot},SinglePlot}: Vector containing elements of the type   SinglePlot which are to be united in the final plot\npositions::Union{Vector{Vector{Any}},Vector}: Determines the arrangement of the plots   in the final plot, i.e. if sp = [a,b] and positions = [[1,1:2],[1,3]] then a    will be located at [1,1:2] and b at [1,3] in the final plot.\nresolution::Tuple{Int64,Int64} = (1200,800): Determines the resolution of the full plot.\n\nReturns\n\nThe function returns the figure and a Vector containing all the axis of the final plot.\n\n\n\n\n\n","category":"function"},{"location":"Plot/#Example","page":"Plot","title":"Example","text":"","category":"section"},{"location":"Plot/","page":"Plot","title":"Plot","text":"In this example we would like to visiulalize the salinity evolution of the hosing experiment. To this end we must first combine different features of the package in order to obtain this data","category":"page"},{"location":"Plot/","page":"Plot","title":"Plot","text":"julia> using FiveBoxModel\n\njulia> function hosing_experiment!(du, u, t_0, t)\n                  H_1 = 5e-4\n                  du[get_index[\"parameters\"]] .= 0.\n                  if t+t_0 <= 2000\n                      sign = 1\n                  else\n                      sign = -1\n                  end\n                  du[get_index[\"F_N\"]] = sign*H_1*0.194\n                  du[get_index[\"F_S\"]] = -sign*H_1*0.226\n                  du[get_index[\"F_T\"]] = sign*H_1*0.597\n                  du[get_index[\"F_IP\"]] = -sign*H_1*0.565\n              end\nhosing_experiment! (generic function with 1 method)\n\njulia> hosingExperiment = ParameterDynamics(hosing_experiment!,no_stochastic_param_dynamics!)\nParameterDynamics(hosing_experiment!, FiveBoxModel.no_stochastic_param_dynamics!, nothing, nothing)\n\njulia> rp = RunParameters(FAMOUS;t_max=5000.,updateInterval=10.,dt=1.,paramDyn=hosingExperiment,\n                                       phaseDyn = DeterministicPhaseDynamics)\nRunParameters(System([35.088, 35.67, 34.441, 34.689, 34.577], ParameterSet(2.66, 0.12, 0.79, 0.58, 66.061, 7.0, 3.683, 10.28, 5.151, 21.29, 88.12, 5.439, 1.88, 89.778, 0.375, 1.014, -0.723, -0.666, 0.035, 3.26, 5.571)), \n10.0, 5000.0, 1.0, PhaseDynamics(FiveBoxModel.deterministic_salinity_dynamics!, FiveBoxModel.no_stochstic_salinity_dynamics!, nothing, nothing), ParameterDynamics(hosing_experiment!, FiveBoxModel.no_stochastic_param_dynamics!, nothing, nothing))\n\njulia> traj,t = runSystem(rp)\nStarting to integrate System...\nthe total time interval is subdivided into 500 subintervals\n\nStarting to integrate subinterval 1 / 500\n\nStarting to integrate subinterval 2 / 500\n\n...\n\nStarting to integrate subinterval 500 / 500\n\n([35.088 35.08799564580706 … 35.10049628385613 35.10049791895199; 35.67 35.66999639842458 … 35.539730298111856 35.53958898527882; … ; 3.26 3.26 … 3.26 3.26; 5.571 5.571 … 5.570999999999999 5.571], [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0  …  4990.0, 4991.0, 4992.0, 4993.0, 4994.0, 4995.0, 4996.0, 4997.0, 4998.0, 4999.0])\n\njulia> function hosing_traj(t)     # This allows the computation of the time evolution of the hosing stength\n           H_1 = 5e-4\n           H = zeros(length(t))\n           for (i,val) in enumerate(t)\n               if val <= 2000\n                   H[i] = H_1*val\n               else\n                   H[i] = 1-H_1*(val-2000)\n               end\n           end\n           return H\n       end\nhosing_traj (generic function with 1 method)\n\njulia> H = hosing_traj(t)\n5000-element Vector{Float64}:\n  0.0\n  0.0005\n  ⋮\n -0.49950000000000006\n\njulia> salinity_evol = createSinglePlot(\"t\",[\"S_N\",\"S_T\",\"S_S\",\"S_IP\",\"S_B\"],\n                                       traj,t,title=\"Time evolution of the salinities\",\n                                       x_unit=\"years\",y_unit=\"psu\") # Single plot containing the salinity evolution during the hosing experiment\nSinglePlot([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0  …  4990.0, 4991.0, 4992.0, 4993.0, 4994.0, 4995.0, 4996.0, 4997.0, 4998.0, 4999.0], [[35.088, 35.08799566823129, 35.08798937952064, 35.087978976936895, 35.08796544547374, 35.087948501233626, 35.0879279150318, 35.08790355802544, 35.08787546730348, 35.08784394877551  …  35.37081445338626, 35.37104150053473, 35.37126850037978, 35.37149541020424, 35.37172225107363, 35.371949013446105, 35.372175701256204, 35.37240231401276, 35.37262884271905, 35.372855297770435], [35.67, 35.669990295304366, 35.66997712277325, 35.669956860817514, 35.66993147443261, 35.66990072062627, 35.66986448193116, 35.66982281622476, 35.669776015086576, 35.66972468241917  …  35.7211422546347, 35.72118400245413, 35.72122575503571, 35.721267516176944, 35.721309283652, 35.72135105828342, 35.72139283966156, 35.72143462778382, 35.721476423400894, 35.72151822553647], [34.441, 34.441016720917744, 34.44103362143554, 34.4410509135918, 34.44106852187264, 34.44108648912412, 34.44110485398059, 34.44112364448877, 34.44114286861502, 34.441162499385264  …  34.35562012817081, 34.355530345618284, 34.35544057238189, 34.355350816824654, 34.3552610747627, 34.355171348025216, 34.35508163580701, 34.35499193816856, 34.354902256813084, 34.354812589687384], [34.689, 34.688999790198, 34.68900058625715, 34.68900345218307, 34.68900783322418, 34.68901381849254, 34.68902146351753, 34.68903077374376, 34.6890416832962, 34.689054023766424  …  34.52670821114472, 34.52653332571092, 34.52635845642081, 34.52618361765965, 34.52600880215783, 34.52583401305979, 34.52565924897026, 34.52548450998585, 34.52530979902992, 34.52513511255984], [34.577, 34.57699884837088, 34.57699771727245, 34.576996626749526, 34.57699556361012, 34.576994527395684, 34.57699351662848, 34.576992528722975, 34.576991560071164, 34.576990606421354  …  34.61136062053668, 34.6114014173803, 34.61144221093545, 34.61148299831438, 34.61152378101121, 34.61156455840356, 34.61160533078198, 34.611646098136724, 34.61168685989498, 34.611727616774765]], \"Time evolution of the salinities\", \"t\", \"\", \"years\", \"psu\", [\"S_N\", \"S_T\", \"S_S\", \"S_IP\", \"S_B\"])\n\njulia> hysteresis = createSinglePlot(H,\"q\",traj,t,title=\"Hysteresis plot of the hosing experiment\",\n                                       x_label=\"Hosing\",x_unit=\"10⁶m³s⁻¹\",y_unit=\"10⁶m³s⁻¹\") # Single plot showing the hyseresis of the hosing experiment\nSinglePlot([0.0, 0.0005, 0.001, 0.0015, 0.002, 0.0025, 0.003, 0.0035, 0.004, 0.0045000000000000005  …  -0.4950000000000001, -0.49550000000000005, -0.496, -0.49649999999999994, -0.4970000000000001, -0.49750000000000005, -0.498, -0.49849999999999994, -0.4990000000000001, -0.49950000000000006], [[17.14245896815534, 17.14209736386482, 17.141699061989485, 17.141223372730824, 17.140688511536013, 17.140088866204483, 17.13941983663284, 17.1386787280615, 17.137866040704427, 17.136987492224034  …  23.466623250896976, 23.472065168225818, 23.47750611304818, 23.482945208002537, 23.488382886776474, 23.493818954059513, 23.499253491261808, 23.504686488908348, 23.510117763215224, 23.51554752800076]], \"Hysteresis plot of the hosing experiment\", \"Hosing\", \"q\", \"10⁶m³s⁻¹\", \"10⁶m³s⁻¹\", nothing)\n\njulia> salinity_evol()   # Check if the salinity plot look right\n(Scene (1200px, 800px):\n  0 Plots\n  2 Child Scenes:\n    ├ Scene (1200px, 800px)\n    └ Scene (1200px, 800px), Axis (5 plots))\n\njulia> fig,ax = combine_plots([salinity_evol,hysteresis],\n                               [[1,1:2],[1,3]],resolution=(1200,500))\n(Scene (1200px, 500px):\n  0 Plots\n  3 Child Scenes:\n    ├ Scene (1200px, 500px)\n    ├ Scene (1200px, 500px)\n    └ Scene (1200px, 500px), Makie.Axis[Axis (5 plots), Axis (1 plots)])\n\njulia> display(fig)\nGLMakie.Screen(...)","category":"page"}]
}
